// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  soundLibraries SoundLibrary[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SoundLibrary {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sounds    Sound[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sound {
  id             String   @id @default(cuid())
  name           String
  description    String?
  audioUrl       String
  libraryId      String
  library        SoundLibrary @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tags           Tag[]    // Many-to-many relation with Tag model
  bpm            Int?     // Optional BPM field
  key            String?  // Optional musical key field
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  sounds    Sound[]  // Many-to-many relation with Sound model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
